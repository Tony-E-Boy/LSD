package com.root.controllers;

import com.root.accessingdatamysql.UserRepository;
import com.root.entity.User;
import org.springframework.stereotype.Controller;

import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;

@Controller
@RequestMapping("/")
public class MainController {

    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private final UserRepository userRepository;

    public MainController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @GetMapping()
    public String indexPage() {
        return "index";
    }

    @GetMapping("/index")
    public String indexPageToo() {
        return "index";
    }

    @GetMapping("/loginPage")
    public String loginPage() {
        return "login";
    }

    @GetMapping("/registrationPage")
    public String registrationPage(@ModelAttribute("user") User user) {

        return "register";
    }

    @GetMapping("/admin")
    public String adminPage() {
        return "register";
    }

    @PostMapping(path = "/create")
    public String addNewUser(HttpServletRequest request, @ModelAttribute("user") User user, BindingResult bindingResult) {

        if (bindingResult.hasErrors()) {
            return "/register";
        }
        String username1 = user.getName();
        String passwd1 = request.getParameter("passwd");

        String x = username1 + passwd1;
        byte[] c = x.getBytes();
        /* q - endpoint DB variable */
        String q = bytesToHex(c);
        user.setHex(q);

        /*checked method*/

        userRepository.save(user);
        return "admin";
    }

    @GetMapping("/autorisationFailedPage")
    public String autorisationFailedPage(){return "autorisationFailedPage";}


    @GetMapping("/add-api")
    public String addApi() {
        return "add-api";
    }

    @GetMapping("/buy-ipo")
    public String buyIpo() {
        return "buyipo";
    }

    @GetMapping("/buy-ico")
    public String buyIco() {
        return "buyico";
    }

    @GetMapping("/trade")
    public String tradePage() {
        return "trade";
    }

    private static String bytesToHex(byte[] hash) {
        StringBuilder hexString = new StringBuilder();
        for (byte b : hash) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        return hexString.toString();
    }
}
